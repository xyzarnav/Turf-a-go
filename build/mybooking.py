
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import sqlite3

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,Frame
conn=sqlite3.connect(r'build/user.db')
cursor=conn.cursor()
#______--#
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"G:\TurfBookingSyS\build\assets\frame7")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
import tkinter as tk

class TurfBookingTable:
    def __init__(self, parent):
        self.parent = parent

        # Create the table headers
        headers = ["BK. ID", "Date", "Time Slot", "Payable Amt.", "Amt. Paid","Amt. Due"]
        for i, header in enumerate(headers):
            label = tk.Label(self.parent, text=header, font=("Arial", 10, "bold"), relief="solid", bd=1 ,justify='center',height=3,width=8)
            label.grid(row=0, column=i, padx=0, pady=0, sticky="nsew")
            self.parent.columnconfigure(i, weight=1)

        # Call the function to display the rows
        self.display_rows()

    # Connect to the backend and retrieve the row data
    # Replace the following code with your backend integration logic
    def get_row_data(self):
        # Execute a JOIN query to fetch data from the bookings table where the turf_name matches the name in the current_user table
        cursor.execute('''SELECT bookings.turf_id, bookings.booking_date, bookings.time_slot, bookings.payable_amount, bookings.booking_amount, 
                          bookings.payable_amount - bookings.booking_amount AS amount_due
                          FROM bookings 
                          JOIN (SELECT * FROM current_user ORDER BY id DESC LIMIT 1) AS latest_user ON bookings.turf_name = latest_user.name 
                          ORDER BY bookings.turf_id DESC''')
        rows = cursor.fetchall()
        return rows

    # Create the table rows
    def display_rows(self):
        rows = self.get_row_data()
        for i, row in enumerate(rows, start=1):
            for j, value in enumerate(row):
                label = tk.Label(self.parent, text=value, font=("Arial", 12), relief="solid", bd=1, anchor='center', justify='center',height=2)
                label.grid(row=i, column=j, padx=0, pady=0, sticky="nsew")

# Usage:


window = Tk()
#____________________________#
window.geometry("1340x740")
window.configure(bg = "#000000")


canvas = Canvas(
    window,
    bg = "#000000",
    height = 740,
    width = 1340,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    802.6805419921875,
    369.4444580078125,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat",
    bg="#000000"
)
button_1.place(
    x=48.0,
    y=239.0,
    width=163.0,
    height=35.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat",
    bg="#000000"
)
button_2.place(
    x=45.0,
    y=309.0,
    width=192.0,
    height=35.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat",
    bg="#000000"
)
button_3.place(
    x=45.0,
    y=379.0,
    width=192.0,
    height=35.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat",
    bg="#000000"
)
button_4.place(
    x=45.0,
    y=454.0,
    width=216.0,
    height=35.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat",
    bg="#000000"
)
button_5.place(
    x=45.0,
    y=530.0,
    width=177.0,
    height=70.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_6 clicked"),
    relief="flat",
    bg="#000000"
)
button_6.place(
    x=48.0,
    y=623.0,
    width=226.0,
    height=35.0
)

canvas.create_text(
    58.0,
    102.0,
    anchor="nw",
    text="TURF-A-GO",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 30 * -1)
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    139.0,
    65.99999182952581,
    image=image_image_2
)

canvas.create_text(
    674.0,
    59.0,
    anchor="nw",
    text="Bookings",
    fill="#000000",
    font=("Poppins SemiBold", 50 * -1)
)

booking_table_frame = Frame(window)
booking_table_frame.place(x = 300, y = 180,width=1000)  # Adjust the position as needed

# Create the booking table
table = TurfBookingTable(booking_table_frame)

window.resizable(False, False)
window.mainloop()
